#run_file "02-BroadcastHassler.rb"
#Broadcast version for Sonic Pi
#coded by Robin Newman,Feb 2021
#utilises script broadcastOSC.py
use_debug false
use_cue_logging false
use_osc_logging false
titlecode="02 Hassler"
use_osc "localhost",8000
computer=get(:computer) #this computer number
computer = 1 if computer == nil #use 1 if computer: not specified

#qt is scale factor for amplitude. Set using :attentuate value
qt=get(:attenuate)
qt=1 if (qt == nil ) #in case attenuate has not been set
qt=[[qt,0].max,1].min

st=0 #start section of multi tempo music
#set_audio_latency! 234 #adjust for latency of computer relative to the others
#play data sustain and release fracions and synth for each part
s=(ring 0.95);r=(ring 0.05);synth=(ring "blade") #parameters for the run. (s,r sustain release fractions)

#amp settings are with the parts data for this file

define :decode do |dl|#return selected channels in an integer array
  puts "entry",dl #print current entry
  if dl.is_a? Numeric
    return Array(dl)
  else
    return dl[1..-2].split(",").map {|str| str.to_i}
  end
end

define :bosc do |num,nv,dv,s,r,synth,tempo,amp,cueval,tr=0| #cueval used to separate tempo sections
  nv.length.times do
    tick
    if nv.look.respond_to?(:each) #deal with chords (played without gap between notes)
      nv.look.each do |v|
        osc "/triggerBroadcast", num, note(v)+tr,  (dv.look),s,r,synth,tempo,amp
      end
    else
      if nv.look!=:r #ignore rests
        osc "/triggerBroadcast", num, note(nv.look)+tr,(dv.look),s,r,synth,tempo,amp
      end
    end
    with_bpm tempo do;sleep dv.look;end #adjusted for the current tempo
  end
  cue cueval #send cue when finished
end

with_fx :reverb,room: 0.8,mix: 0.6 do #add some reverb to playback
  
  live_loop :pl do
    use_real_time
    b = sync"/osc*/broadcast"
    if b[0]==99 #99 is channel code to receive channel data lists
      op=[] #start output list
      b.each do |x| #check each element and process using decode
        op << (decode x)
      end
      #op now contains all machine channel list with array elements for each machine
      op[computer]=["none found"] if op[computer]==nil
      set :channel,op[computer]
    elsif b[0]==10 #channel 10 message used to /playnext and then stop live loop
      sleep 2
      osc_send "localhost",4560,"/playnext",b[1] #send info back to calling buffer
      sleep 0.2
      stop
    end
    channel=get(:channel)
    puts "title code #{titlecode}: tempo #{b[6]}"
    puts "channels for computer no #{computer} #{channel}"
    if channel.include? b[0] #only proceed for channels allocated to this conputer
      use_synth b[5].to_sym
      use_bpm b[6]
      play b[1],sustain: b[2]*b[3],release: b[2]*b[4],amp: b[7]
    end
  end
end

########## Allocate channels to be played by each computer here
#computer number               1     2     3     4     5     6     7     8
osc "/triggerBroadcast",99,    0,    0,    1,    1,    2,    2,    3,    3
#osc "/triggerBroadcast",99,    "[0,1]",    9,    9,    9,    "[2,3]"#,    2,    3,    3
sleep 0.2#belt and braces: allow a short time to make sure received and processed

a1=[]
b1=[]
a1[0]=[:G4,:G4,:D5,:G5,:F5,:D5,:E5,:F5,:F5,:E5,:C5,:D5,:E5,:E5,:D5,:r,:r,:G4,:G4,:D5,:G5,:F5,:D5,:E5,:F5,:F5,:E5,:C5,:D5,:E5,:E5,:D5,:E5,:F5,:C5,:D5,:C5,:C5,:Bf4,:A4,:G4,:r,:D5,:C5,:C5,:Bf4,:D5,:Cs5,:D5,:r,:r,:r,:r,:r,:r,:r,:r,:G4,:G4,:D5,:G5,:F5,:D5,:E5,:F5,:F5,:E5,:C5,:D5,:E5,:E5,:D5,:Bf4,:C5,:D5,:D5,:C5,:A4,:B4,:C5,:C5,:Bf4,:D5,:C5,:Bf4,:A4,:G4,:F4,:E4,:D4,:D5,:E5,:F5,:D5,:F5,:E5,:D5,:D5,:C5,:Bf4,:A4,:A4,:Bf4,:A4,:G4,:G4,:Fs4,:E4,:Fs4]
b1[0]=[1.0,1.0,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,4.0,4.0,4.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,3.0,1.0,2.0,1.0,1.0,3.0,1.0,2.0,2.0,4.0,2.0,2.0,3.0,1.0,2.0,4.0,2.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,1.5,0.5,1.0,0.5,0.5,0.5,0.5,1.0,0.5,0.5,1.0,1.0,1.0,1.0,6.0,2.0,4.0,2.0,3.0,1.0,2.0,1.0,1.0,3.0,0.5,0.5,2.0]
a1[1]=[:G4,:D4,:G4,:A4,:Bf4,:C5,:D5,:D5,:D5,:Bf4,:C5,:D5,:Ef5,:C5,:D5,:r,:r,:G4,:D4,:G4,:A4,:Bf4,:C5,:D5,:E5,:F5,:F5,:C5,:D5,:E5,:F5,:G5,:F5,:D5,:E5,:F5,:E5,:F5,:D5,:Ef5,:C5,:D5,:Cs5]
b1[1]=[1.0,1.0,1.0,1.0,1.0,1.0,4.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,4.0,2.0,6.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,3.0,1.0,1.0,1.0,3.0,1.0,1.0,1.0,2.0,1.0,2.0,2.0,1.0,1.0,2.0,1.0]
a1[2]=[:D5,:r,:D5,:C5,:Bf4,:D5,:G4,:Bf4,:C5,:Bf4,:A4,:G4,:A4,:G4,:r,:G5,:F5,:E5,:G5,:C5,:E5,:F5,:E5,:D5,:C5,:r,:C5,:Bf4,:A4,:C5,:F4,:A4,:Bf4,:A4,:G4,:A4,:r,:r,:r,:F5,:E5,:D5,:F5,:Bf4,:D5,:Ef5,:D5,:C5,:Bf4,:A4,:Bf4,:D5,:C5,:Bf4,:D5,:G4,:Bf4,:C5,:Bf4,:A4,:G4,:Fs4,:G4,:Fs4,:G4,:A4,:Bf4,:C5,:D5,:C5,:D5,:E5,:D5,:E5,:F5,:E5,:D5,:C5,:Bf4,:A4,:G4,:A4,:Bf4,:C5,:D5,:C5,:Bf4,:A4,:Bf4,:D5,:D5,:D5,:D5,:D5,:D5,:D5,:C5,:D5,:Bf4,:C5,:D5,:Bf4,:Bf4,:Bf4,:Bf4,:Bf4,:Bf4,:Bf4,:G4,:Bf4,:G4,:A4,:Bf4,:F4,:G4,:A4,:Bf4,:C5,:D5,:E5,:F5,:G5,:F5,:D5,:E5,:F5,:G5,:A5,:G5,:G5,:F5,:F5,:E5,:E5,:D5,:D5,:Cs5,:D5,:Cs5,:B4,:Cs5,:D5,:r,:D5,:D5,:C5,:B4,:r,:C5,:C5,:Bf4,:A4,:G4,:A4,:G4,:r,:r,:D5,:D5,:C5,:B4,:C5,:r,:G5,:G5,:F5,:E5,:D5,:r,:D5,:D5,:C5,:B4,:C5,:r,:F5,:F5,:E5,:D5,:r,:G5,:G5,:F5,:E5,:r,:A5,:A5,:G5,:F5,:E5,:D5,:Cs5,:D5,:F5,:F5,:E5,:D5,:r,:E5,:E5,:D5,:C5,:r,:D5,:D5,:C5,:B4,:r,:C5,:C5,:Bf4,:A4,:r,:Bf4,:Bf4,:A4,:G4,:r,:A4,:A4,:G4,:F4,:r,:G4,:G4,:F4,:E4]
b1[2]=[4.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,2.0,4.0,4.0,2.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,4.0,2.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0,2.0,1.0,1.0,3.0,1.0,3.0,1.0,3.0,1.0,3.0,1.0,1.0,1.0,2.0,2.0,4.0,2.0,2.0,2.0,0.5,0.5,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,0.5,0.5,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.0,2.0,3.0,0.5,0.5,2.0,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,1.0,1.0,2.0,4.0,2.0,0.5,0.5,0.5,0.5,2.0,2.0,0.5,0.5,0.5,0.5,2.0,2.0,0.5,0.5,0.5,0.5,2.0,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,1.0,2.0,2.0,1.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0]
a1[3]=[:D4,:D5,:D5,:C5,:Bf4,:A4,:G4,:Fs4]
b1[3]=[0.5,0.5,0.5,0.5,1.0,2.0,2.0,1.0]
a1[4]=[:G4,:D5,:D5,:C5,:Bf4]
b1[4]=[0.5,0.5,0.5,0.5,2.0]
a1[5]=[:r,:Bf4,:Bf4,:A4,:G4]
b1[5]=[0.5,0.5,0.5,0.5,2.0]
a1[6]=[:r,:G5,:G5,:F5,:Ef5,:r,:Ef5,:Ef5,:D5,:C5]
b1[6]=[0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0]
a1[7]=[:B4]
b1[7]=[4.0]
c1=[178,270,178,176,166,152,120,65]
amp1=[0.8,0.4,0.6,0.8,0.8,0.9,1,1] #amp changes for each section in this program
in_thread do
  for i in st..a1.length-1 #st allows start at any tempo change
    in_thread do
      bosc 0,a1[i],b1[i],s[0],r[0],synth[0],c1[i],amp1[i]*qt,:cont0
    end
    sync :cont0 #this sync is necessary to get tempo change at right time
  end
    sleep 0.2
  osc "/triggerBroadcast",10,"finished02" #send to channel 10 to signify program finished
end



a2=[]
b2=[]
a2[0]=[:r,:D4,:D4,:A4,:D5,:C5,:A4,:B4,:C5,:C5,:Bf4,:G4,:A4,:Bf4,:Bf4,:A4,:r,:r,:D4,:D4,:A4,:D5,:C5,:A4,:B4,:C5,:C5,:Bf4,:G4,:A4,:Bf4,:Bf4,:A4,:G4,:A4,:Fs4,:G4,:Fs4,:G4,:Bf4,:A4,:r,:G4,:G4,:A4,:G4,:F4,:G4,:A4,:Bf4,:A4,:Bf4,:C5,:A4,:A4,:G4,:A4,:Bf4,:G4,:G4,:F4,:F4,:E4,:E4,:D4,:D4,:Cs4,:D4,:r,:r,:r,:r,:r,:r,:r,:D4,:D4,:A4,:D5,:Bf4,:G4,:A4,:Bf4,:Bf4,:A4,:F4,:G4,:A4,:A4,:G4,:F4,:E4,:F4,:Ef4,:C4,:D4]
b2[0]=[4.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,4.0,4.0,4.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,4.0,3.0,1.0,1.0,2.0,1.0,2.0,2.0,4.0,2.0,2.0,4.0,3.0,1.0,1.0,1.0,1.0,1.0,1.5,0.5,1.0,1.0,2.0,1.0,1.0,1.0,1.0,3.0,1.0,3.0,1.0,3.0,1.0,4.0,2.0,8.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.5,0.5,2.0,4.0,2.0,2.0,4.0]
a2[1]=[:D4,:r,:D4,:G3,:D4,:E4,:F4,:G4,:A4,:G4,:F4,:G4,:A4,:Bf4,:Bf4,:A4,:G4,:A4,:Bf4,:C5,:A4,:Bf4,:A4,:G4,:F4,:A4,:Bf4,:C5,:C5,:Bf4,:G4,:Bf4,:A4,:C5,:Bf4,:Bf4,:A4]
b2[1]=[4.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0,1.0,1.0,4.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,3.0,1.0,2.0,2.0,2.0,2.0,4.0,2.0,1.0,1.0,4.0,2.0,2.0,2.0,2.0,4.0]
a2[2]=[:r,:A4,:G4,:F4,:A4,:D4,:F4,:G4,:F4,:E4,:D4,:E4,:C4,:D4,:E4,:Fs4,:G4,:Fs4,:G4,:r,:r,:r,:G4,:F4,:E4,:G4,:C4,:E4,:F4,:E4,:D4,:C4,:D4,:E4,:F4,:E4,:F4,:r,:F4,:E4,:D4,:F4,:Bf3,:D4,:Ef4,:D4,:C4,:D4,:r,:Bf4,:A4,:G4,:r,:F4,:E4,:D4,:r,:D4,:Ef4,:D4,:C4,:D4,:G4,:F4,:G4,:A4,:G4,:A4,:Bf4,:A4,:Bf4,:C5,:Bf4,:A4,:G4,:F4,:Ef4,:D4,:F4,:F4,:G4,:F4,:F4,:F4,:F4,:F4,:F4,:F4,:F4,:F4,:A4,:Bf4,:G4,:A4,:Bf4,:F4,:F4,:F4,:F4,:F4,:F4,:F4,:F4,:F4,:Ef4,:Ef4,:D4,:D4,:E4,:F4,:G4,:A4,:Bf4,:C5,:Bf4,:G4,:Bf4,:Bf4,:Bf4,:A4,:C5,:G4,:A4,:F4,:C5,:Bf4,:Bf4,:A4,:r,:A4,:A4,:G4,:Fs4,:r,:G4,:G4,:F4,:E4,:Fs4,:G4,:Fs4,:G4,:r,:r,:G4,:G4,:F4,:E4,:A4,:A4,:G4,:F4,:Bf4,:Bf4,:A4,:G4,:C5,:C5,:Bf4,:A4,:G4,:A4,:G4,:G4,:C4,:C5,:A4,:B4,:C5,:r,:C5,:C5,:Bf4,:A4,:A4,:r,:G4,:G4,:F4,:E4,:r,:A4,:A4,:G4,:F4,:r,:G4,:G4,:F4,:E4,:r,:F4,:F4,:E4,:D4,:r,:E4,:E4,:D4,:C4,:r,:D4,:D4,:C4,:B3,:r,:C4,:C4,:B3]
b2[2]=[1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,0.5,0.5,1.0,2.0,1.0,4.0,4.0,2.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,2.0,1.0,2.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,2.0,4.0,1.0,0.5,0.5,2.0,1.0,0.5,0.5,2.0,2.0,2.0,4.0,2.0,2.0,6.0,2.0,1.0,1.0,2.0,1.0,1.0,2.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,4.0,2.0,4.0,2.0,2.0,2.0,2.0,2.0,0.5,0.5,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,0.5,0.5,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.5,1.0,0.5,1.5,0.5,1.5,0.5,1.0,2.0,1.0,1.0,2.0,1.0,1.0,1.0,1.0,1.5,0.5,2.0,8.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,1.0,2.0,1.0,4.0,4.0,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,1.0,1.0,2.0,3.0,1.0,1.0,1.0,2.0,4.0,2.0,0.5,0.5,0.5,0.5,4.0,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5]
a2[3]=[:A3,:r,:F4,:F4,:E4,:D4]
b2[3]=[2.0,0.5,0.5,0.5,0.5,4.0]
a2[4]=[:r,:Bf4,:Bf4,:A4,:G4]
b2[4]=[0.5,0.5,0.5,0.5,2.0]
a2[5]=[:r,:G4,:G4,:F4,:Ef4]
b2[5]=[0.5,0.5,0.5,0.5,2.0]
a2[6]=[:G4,:G4]
b2[6]=[4.0,4.0]
a2[7]=[:G4]
b2[7]=[4.0]
c2=[178,270,178,176,166,152,120,65]
amp2=[0.8,0.4,0.6,0.8,0.8,0.9,1,1]
in_thread do
  for i in st..a2.length-1
    in_thread do
      bosc 1,a2[i],b2[i],s[1],r[1],synth[1],c2[i],amp2[i]*qt,:cont1
    end
    sync :cont1
  end
end

a3=[]
b3=[]
a3[0]=[:r,:r,:r,:G3,:G3,:D4,:G4,:F4,:D4,:E4,:F4,:F4,:E4,:C4,:D4,:E4,:E4,:D4,:C4,:B3,:A3,:G3,:A3,:A3,:r,:r,:r,:r,:G3,:G3,:D4,:G4,:F4,:D4,:E4,:F4,:F4,:E4,:C4,:D4,:E4,:E4,:D4,:E4,:F4,:E4,:D4,:E4,:F4,:G4,:F4,:E4,:F4,:E4,:E4,:D4,:D4,:C4,:C4,:Bf3,:G3,:Bf3,:A3,:A3,:G3,:A3,:Bf3,:A3,:Bf3,:A3,:G3,:A3,:Bf3,:A3,:G3,:A3,:Bf3,:C4,:D4,:E4,:F4,:G4,:A4,:G4,:G4,:Fs4,:G4,:D4,:C4,:Bf3,:A3,:Bf3,:A3,:C4,:Bf3,:A3,:D4,:Bf3,:C4,:D4,:E4,:F4,:C4,:A3,:Bf3,:C4,:D4,:Cs4,:D4,:D4,:C4,:Bf3,:A3,:G3,:A3]
b3[0]=[4.0,4.0,4.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,4.0,4.0,4.0,4.0,4.0,4.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,3.0,1.0,2.0,2.0,1.0,1.0,1.0,2.0,1.0,1.0,1.0,3.0,1.0,3.0,1.0,3.0,1.0,1.0,1.0,2.0,3.0,1.0,3.0,1.0,2.0,2.0,0.5,0.5,0.5,0.5,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.5,0.5,1.0,2.0,1.0,4.0,2.0,2.0,2.0,2.0,2.0,1.0,1.0,1.0,2.0,1.0,2.0,1.0,0.5,0.5,1.5,0.5,2.0,1.0,1.0,0.5,0.5,2.0,1.0,3.0,1.0,1.0,1.0,1.0,1.0,4.0]
a3[1]=[:G3,:D3,:G3,:A3,:Bf3,:C4,:D4,:E4,:F4,:Ef4,:D4,:C4,:D4,:D4,:F4,:E4,:D4,:E4,:Cs4,:D4,:r,:D4,:A3,:D4,:E4,:F4,:G4,:A4,:G4,:G4,:A4,:D4,:G4,:F4,:G4,:A4,:D4,:F4,:G4,:F4,:E4]
b3[1]=[3.0,1.0,1.0,1.0,3.0,1.0,1.0,1.0,2.0,1.0,1.0,2.0,4.0,2.0,2.0,1.0,1.0,1.0,1.0,4.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,4.0,2.0,1.0,1.0,2.0,1.0,1.0,3.0,1.0,2.0]
a3[2]=[:D4,:r,:r,:r,:r,:D4,:C4,:Bf3,:D4,:G3,:Bf3,:C4,:Bf3,:A3,:G3,:A3,:B3,:C4,:B3,:C4,:r,:r,:r,:C4,:Bf3,:A3,:C4,:F3,:A3,:Bf3,:A3,:G3,:F3,:G3,:A3,:Bf3,:A3,:Bf3,:F4,:E4,:D4,:F4,:Bf3,:D4,:Ef4,:D4,:C4,:Bf3,:r,:D4,:C4,:Bf3,:D4,:G3,:Bf3,:C4,:Bf3,:A3,:G3,:A3,:G3,:D4,:E4,:F4,:E4,:F4,:G4,:F4,:G4,:A4,:G4,:F4,:E4,:D4,:C4,:Bf3,:C4,:F3,:G3,:A3,:D4,:C4,:Bf3,:Bf3,:Bf3,:Bf3,:Bf3,:Bf3,:Bf3,:Bf3,:F4,:D4,:Ef4,:C4,:Bf3,:D4,:D4,:D4,:D4,:D4,:D4,:D4,:C4,:D4,:Bf3,:C4,:F3,:Bf3,:A3,:D4,:C4,:F4,:E4,:A4,:G4,:E4,:D4,:G4,:F4,:E4,:D4,:F4,:E4,:E4,:D4,:D4,:C4,:C4,:G4,:G4,:F4,:E4,:F4,:E4,:D4,:r,:r,:r,:D4,:D4,:C4,:B3,:r,:C4,:C4,:Bf3,:A3,:G3,:A3,:D4,:r,:F4,:F4,:E4,:D4,:r,:A4,:A4,:G4,:Fs4,:G4,:Fs4,:G4,:r,:C4,:C4,:Bf3,:A3,:r,:F4,:F4,:E4,:D4,:r,:G4,:G4,:F4,:E4,:r,:A4,:A4,:G4,:F4,:F4,:E4,:D4,:D4,:G4,:r,:F4,:F4,:E4,:D4,:r,:E4,:E4,:D4,:C4,:r,:D4,:D4,:C4,:Bf3,:r,:C4,:C4,:Bf3,:A3,:r,:Bf3,:Bf3,:A3,:G3,:r,:A3,:A3,:G3]
b3[2]=[4.0,4.0,4.0,2.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.5,0.5,1.0,1.0,0.5,0.5,2.0,1.0,4.0,4.0,2.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,2.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.5,0.5,2.0,2.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,4.0,2.0,3.0,1.0,2.0,1.0,1.0,2.0,1.0,1.0,1.5,0.5,3.0,1.0,3.0,1.0,2.0,2.0,3.0,1.0,2.0,2.0,4.0,2.0,2.0,0.5,0.5,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,0.5,0.5,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,2.0,2.0,4.0,4.0,4.0,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,1.0,1.0,2.0,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,1.0,2.0,1.0,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,1.0,1.0,2.0,3.0,1.0,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5]
a3[3]=[:F3,:F4,:F4,:E4,:D4,:D4,:D4,:C4,:Bf3,:Bf3,:A3]
b3[3]=[0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,1.0,1.0,2.0]
a3[4]=[:G3,:r,:Bf3,:Bf3,:A3]
b3[4]=[2.0,0.5,0.5,0.5,0.5]
a3[5]=[:G3,:Bf3]
b3[5]=[3.0,1.0]
a3[6]=[:C4,:G3,:G4,:G4,:F4,:Ef4,:D4,:Ef4]
b3[6]=[2.0,0.5,0.5,0.5,0.5,1.0,1.0,2.0]
a3[7]=[:D4]
b3[7]=[4.0]
c3=[178,270,178,176,166,152,120,65]
amp3=[0.8,0.4,0.6,0.8,0.8,0.9,1,1]
in_thread do
  for i in st..a3.length-1
    in_thread do
      bosc 2,a3[i],b3[i],s[2],r[2],synth[2],c3[i],amp3[i]*qt,:cont2
    end
    sync :cont2
  end
end

a4=[]
b4=[]
a4[0]=[:r,:r,:r,:r,:D3,:D3,:A3,:D4,:C4,:A3,:B3,:C4,:C4,:G3,:F3,:E3,:D3,:r,:G2,:G2,:D3,:G3,:F3,:D3,:E3,:F3,:F3,:E3,:C3,:D3,:E3,:F3,:D3,:G2,:D3,:D4,:A3,:C4,:G3,:Bf3,:A3,:r,:D3,:D3,:A3,:D4,:C4,:A3,:B3,:C4,:C4,:Bf3,:G3,:A3,:Bf3,:Bf3,:A3,:F3,:G3,:A3,:A3,:G3,:E3,:F3,:G3,:G3,:F3,:D3,:E3,:F3,:F3,:E3,:D3,:E3,:D3,:G3,:Fs3,:G3,:A3,:Bf3,:A3,:G3,:F3,:E3,:D3,:G3,:A3,:Bf3,:C4,:C4,:Bf3,:G3,:A3,:A3,:G3,:Bf3,:F3,:G3,:D3,:E3,:Fs3,:G3,:Fs3,:G3,:Bf3,:F3,:F3,:G3,:A3,:D3,:Bf2,:C3,:Ef3,:D3]
b4[0]=[4.0,4.0,4.0,4.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,1.0,1.0,2.0,1.0,1.0,4.0,4.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,4.0,4.0,2.0,2.0,2.0,2.0,2.0,2.0,4.0,4.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,2.0,1.0,2.0,1.0,0.5,0.5,0.5,0.5,1.0,0.5,0.5,1.0,1.0,1.0,1.0,3.0,1.0,3.0,1.0,3.0,1.0,2.0,2.0,2.0,2.0,3.0,1.0,1.0,2.0,1.0,3.0,1.0,3.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,4.0]
a4[1]=[:G2,:r,:r,:G3,:D3,:G3,:A3,:Bf3,:C4,:D4,:C4,:Bf3,:A3,:G3,:F3,:Ef3,:D3,:D4,:C4,:Bf3,:A3,:G3,:A3,:Bf3,:C4,:D4,:A3,:Bf3,:G3,:A3]
b4[1]=[6.0,6.0,6.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0,2.0,3.0,1.0,2.0,4.0,2.0,3.0,1.0,2.0,3.0,1.0,1.0,1.0,2.0,2.0,2.0,4.0,2.0]
a4[2]=[:D3,:r,:D4,:C4,:Bf3,:D4,:G3,:Bf3,:C4,:Bf3,:A3,:G3,:D4,:D3,:r,:G3,:F3,:E3,:G3,:C3,:E3,:F3,:E3,:D3,:C3,:G3,:C3,:C4,:Bf3,:A3,:C4,:F3,:A3,:Bf3,:A3,:G3,:F3,:C4,:r,:F3,:E3,:D3,:F3,:Bf2,:D3,:Ef3,:D3,:C3,:Bf2,:F3,:Bf2,:r,:Bf3,:A3,:G3,:Bf3,:Ef3,:F3,:Bf2,:Bf3,:A3,:G3,:r,:G3,:G3,:F3,:Ef3,:C3,:D3,:Ef3,:D3,:G2,:G3,:A3,:Bf3,:A3,:Bf3,:C4,:Bf3,:C4,:D4,:A3,:Bf3,:F3,:G3,:D3,:Ef3,:C3,:D3,:Bf2,:F3,:D3,:Ef3,:F3,:Bf2,:r,:r,:r,:Bf2,:Bf2,:Bf2,:Bf2,:Bf2,:Bf2,:Bf2,:F3,:D3,:Ef3,:C3,:Bf2,:C3,:D3,:E3,:F3,:G3,:A3,:Bf3,:C4,:Bf3,:G3,:A3,:Bf3,:C4,:D4,:C4,:C4,:Bf3,:Bf3,:A3,:A3,:G3,:G3,:A3,:D3,:r,:r,:r,:G3,:G3,:F3,:E3,:Fs3,:G3,:Fs3,:G3,:A3,:Bf3,:C4,:D4,:r,:G3,:G3,:F3,:E3,:F3,:G3,:A3,:D3,:D4,:D4,:C4,:B3,:r,:C4,:C4,:Bf3,:A3,:r,:Bf3,:Bf3,:A3,:G3,:r,:A3,:A3,:G3,:F3,:r,:G3,:G3,:F3,:E3,:r,:F3,:F3,:E3,:D3,:r,:E3,:E3,:D3,:C3]
b4[2]=[2.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,1.0,0.5,0.5,1.0,1.0,2.0,2.0,1.0,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,2.0,2.0,2.0,4.0,2.0,1.0,1.0,2.0,1.0,1.0,2.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,4.0,4.0,4.0,2.0,2.0,0.5,0.5,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,1.5,0.5,2.0,8.0,4.0,4.0,4.0,0.5,0.5,0.5,0.5,2.0,1.0,2.0,1.0,2.0,2.0,2.0,2.0,4.0,0.5,0.5,0.5,0.5,2.0,4.0,4.0,8.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0,0.5,0.5,0.5,0.5,2.0]
a4[3]=[:D3]
b4[3]=[8.0]
a4[4]=[:G3,:r,:G3,:G3,:F3]
b4[4]=[2.0,0.5,0.5,0.5,0.5]
a4[5]=[:Ef3,:r,:Ef3,:Ef3,:D3]
b4[5]=[2.0,0.5,0.5,0.5,0.5]
a4[6]=[:C3]
b4[6]=[8.0]
a4[7]=[:G3]
b4[7]=[4.0]
c4=[178,270,178,176,166,152,120,65]
amp4=[0.8,0.4,0.6,0.8,0.8,0.9,1,1]
in_thread do
  for i in st..a4.length-1
    in_thread do
      bosc 3,a4[i],b4[i],s[3],r[3],synth[3],c4[i],amp4[i]*qt,:cont3
    end
    sync :cont3
  end
end